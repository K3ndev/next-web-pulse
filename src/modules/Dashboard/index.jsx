import { useState, useEffect, useRef } from 'react';
import Head from 'next/head';
import {
  useUser,
  useSupabaseClient,
  useSession,
} from '@supabase/auth-helpers-react';
import { Header, Footer } from '../../shared/component/index';

function Dashboard() {
  const [isNotif, setIsNotif] = useState(true);
  const inputUrl = useRef();
  const [loading, setLoading] = useState(false);
  const [scanResult, setScanResult] = useState(null);

  // database
  const session = useSession();
  const supabase = useSupabaseClient();
  const user = useUser();

  async function getProfile() {
    try {
      const { data, error, status } = await supabase
        .from('profiles')
        .select(`scan_result`)
        .eq('id', user.id)
        .single();

      if (error && status !== 406) {
        throw error;
      }

      if (data) {
        setScanResult(data.scan_result);
      }
    } catch (error) {
      // console.log(error);
    }
  }

  async function updateProfile({ result }) {
    try {
      const updates = {
        id: user.id,
        scan_result: result,
        updated_at: new Date().toISOString(),
      };

      const { error } = await supabase.from('profiles').upsert(updates);
      if (error) throw error;
    } catch (error) {
      // console.log(error);
    }
  }

  useEffect(() => {
    const timer = setTimeout(() => {
      setIsNotif(false);
    }, 5000);
    return () => clearTimeout(timer);
  }, []);

  useEffect(() => {
    getProfile();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [session]);

  const fetchResult = async (URL) => {
    setLoading(true);
    const res = await fetch(`/api?url=${URL}`);
    const data = await res.json();
    getProfile();
    setTimeout(() => {
      setLoading(false);
    }, 10000);
    return data;
  };
  const runScanHandler = () => {
    if (loading === true) {
      return;
    }
    fetchResult(inputUrl.current.value.split(' ').join('')).then((data) => {
      updateProfile({ result: data });
    });
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <title>WebPulse | Dashboard Page</title>
      </Head>
      <div className="custom-background-vision"></div>
      <Header />

      <main className="mt-20">
        {/* notification */}
        {isNotif && (
          <div className="toast-center toast toast-top absolute z-50 max-w-xl">
            <div className="w-max rounded-xl bg-primary p-4">
              <div>
                <p className="text-white">
                  Automation scan is currently unavailable
                </p>
              </div>
            </div>
          </div>
        )}
        {loading && (
          <div className="toast-center toast toast-top absolute z-50 max-w-xl">
            <div className="w-max rounded-xl bg-primary p-4">
              <div>
                <p className="text-white">
                  Scanning is happening on server side, Please standby
                </p>
                <p className="text-white">
                  Updating is happening on client side, Please standby
                </p>
              </div>
            </div>
          </div>
        )}

        <section className="py-20">
          <div className="mx-auto max-w-6xl rounded-md border bg-white px-5 py-10 shadow-sm">
            <h2 className="typo-playfair mb-10 text-center text-3xl">
              Scan your website
            </h2>
            <div>
              <div className="form-control">
                <label className="label">
                  <span className="label-text">Enter your url</span>
                </label>
                <label className="input-group">
                  <input
                    ref={inputUrl}
                    type="text"
                    placeholder="https://google.com, ..."
                    className="input-bordered input"
                  />
                  <span
                    className={`cursor-pointer ${
                      loading === false
                        ? 'hover:text-white hover:bg-primary'
                        : 'bg-red-600 text-white'
                    }`}
                    onClick={runScanHandler}
                  >
                    Run Scan
                  </span>
                </label>
                <p>sample url: https://google.com</p>
                <p>sample url: https://google.com,https://www.facebook.com</p>
              </div>
            </div>

            {/* result */}
            <div className="mt-10">
              <h2 className="text-lg text-primary">Your Scan Result</h2>
              {scanResult?.map((item) => {
                return (
                  <div key={item.url} className="flex justify-between">
                    <div className="flex gap-2">
                      <div>rank: {item.ranks.hundos}</div>
                      <p>{item.url}</p>
                    </div>
                    <div className="flex gap-3">
                      <p>
                        accessibility: {item.lighthouse.accessibility * 100}
                      </p>
                      <p>
                        bestPractices: {item.lighthouse.bestPractices * 100}
                      </p>
                      <p>performance: {item.lighthouse.performance * 100}</p>
                      <p>seo: {item.lighthouse.seo * 100}</p>
                      <p className="ml-2">
                        Total score: {item.lighthouse.total}
                      </p>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </section>
      </main>
      <Footer />
    </>
  );
}

export default Dashboard;

// todo disable around 10sec the button after scan
